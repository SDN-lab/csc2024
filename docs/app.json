[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\nlibrary(bslib) #for css stuff...\nlibrary(DT) #editable data tables\nlibrary(ggplot2)\n\n# Define UI for application that draws a histogram\nui <- page_fillable(\n\n  # Application title\n  titlePanel(\"Summer school test\"),\n  \n\n\n  # Sidebar with a slider input for number of bins\n  layout_sidebar(\n    border = FALSE,\n    fillable = FALSE,\n    sidebar = sidebar(\n      tags$label(\"k param\"), #workaround for weird scrolling when updating datatable (https://stackoverflow.com/questions/47048303/r-shiny-how-to-stop-sliderinput-label-click-from-causing-scroll-to-top-of-page)\n      sliderInput(\"k_param\",\n                  label=NULL,\n                  min = 0,\n                  max = 3,\n                  value = 1,\n                  step = 0.01),\n      sliderInput(\"beta\",\n                  \"beta\",\n                  min = 0,\n                  max = 10,\n                  value = 1,\n                  step = 0.1),\n      sliderInput(\"effort\",\n                  \"Effort level\",\n                  min = 1,\n                  max = 5, \n                  value = 1,\n                  #step = 0.1),\n                  step = 1),\n      sliderInput(\"reward\",\n                  \"Reward level\",\n                  min = 1,\n                  max = 5,\n                  value = 1,\n                  #step = 0.1)\n                  step = 1)\n    ),\n    \n    #Main page content\n    selectInput(\"func_form\",\n                \"Select functional form\",\n                choices = list(\"Linear\" = \"Linear\", \"Parabolic\" = \"Parabolic\", \"Hyperbolic\" = \"Hyperbolic\"),\n                selected = \"Parabolic\"\n    ),\n    uiOutput(\"sv_expression\"),\n    uiOutput(\"softmax_expression\"),\n    \n    #uiOutput(\"sv_print\"),\n    #uiOutput(\"softmax_print\"),\n    uiOutput(\"math_output\"),\n    \n    plotOutput(\"softmax_plot\"),\n    \n    plotOutput(\"effort_plot\"),\n    \n    sprintf(\"testing including datatable. Should be possible make it editable and tied to the figures above\"),\n    DTOutput(\"table\")\n  )\n)\n\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  \n  softmax <- function(SV) {\n    exp(SV * input$beta) / (exp(SV * input$beta) + exp(1 * input$beta))\n  }\n  \n  SV_compute <- function() {\n    if (input$func_form == \"Linear\") {\n      SV <- input$reward - (input$k_param*input$effort)\n    } else if (input$func_form == \"Parabolic\") {\n      SV <- input$reward - (input$k_param*(input$effort^2))\n    } else if (input$func_form == \"Hyperbolic\") {\n      SV <- input$reward / (1 + input$k_param*input$effort)\n    }\n  }\n  \n  \n  testtable = data.frame(\n    ID = \"101\",\n    reward_level = rep(2:6, times=5),\n    effort_level = rep(2:6, each=5)\n  )\n  \n  \n  output$sv_expression <- renderUI({\n    withMathJax(\n      if (input$func_form == \"Linear\") {\n        sprintf(\"$$SV = R - kE$$\")\n      } else if (input$func_form == \"Parabolic\") {\n        sprintf(\"$$SV = R - kE^2$$\")\n      } else if (input$func_form == \"Hyperbolic\") {\n        sprintf(\"$$SV = \\\\frac{R}{1+kE}$$\")\n      }\n    )\n  })\n  \n  output$softmax_expression <- renderUI({\n    withMathJax(\n      sprintf(\"$$P(work) = \\\\frac{e^{SV*\\\\beta}}{e^{SV*\\\\beta} + e^{1*\\\\beta}}$$\")\n    )\n  })\n  \n  output$math_expressions <- renderUI({\n    if (input$func_form == \"Linear\") {\n      sv_expr = sprintf(\"$$SV = R - kE$$\")\n    } else if (input$func_form == \"Parabolic\") {\n      sv_expr = sprintf(\"$$SV = R - kE^2$$\")\n    } else if (input$func_form == \"Hyperbolic\") {\n      sv_expr = sprintf(\"$$SV = \\\\frac{R}{1+kE}$$\")\n    }\n    \n    withMathJax(\n      sv_expr, #SV formula\n      sprintf(\"$$P(work) = \\\\frac{e^{SV*\\\\beta}}{e^{SV*\\\\beta} + e^{1*\\\\beta}}$$\") #softmax formula\n    )\n    \n  })\n  \n   \n  # output$sv_print <- renderUI({\n  #   if (input$func_form == \"Linear\") {\n  #     sv_text = sprintf(\"$$%.2f = %i - (%.2f)%i$$\", SV_compute(), input$reward, input$k_param, input$effort)\n  #   } else if (input$func_form == \"Parabolic\") {\n  #     sv_text = sprintf(\"$$%.2f = %i - (%.2f)(%i^2)$$\", SV_compute(), input$reward, input$k_param, input$effort)\n  #   } else if (input$func_form == \"Hyperbolic\") {\n  #     sv_text = sprintf(\"$$%.2f = \\\\frac{%i}{1 + (%.2f)%i}$$\", SV_compute(), input$reward, input$k_param, input$effort)\n  #   }  \n  #   withMathJax(sv_text)  \n  # })\n  \n  # output$softmax_print <- renderUI({\n  #     soft_out <- softmax(SV_compute())\n  #     SV <- SV_compute()\n  #     beta <- input$beta\n  #     sv_text = sprintf(\"$$%.2f = %i - (%.2f)%i$$\", SV_compute(), input$reward, input$k_param, input$effort)\n  #     \n  #     withMathJax(\n  #       \n  #       sprintf(\"$$%.3f = \\\\frac{e^{%.2f*%.2f}}{e^{%.2f*%.2f} + e^{1*%.2f}}$$\", soft_out, SV, beta, SV, beta, beta)\n  #     )\n  # })\n  \n  output$math_output <- renderUI({\n    \n    SV <- SV_compute()\n    soft_out <- softmax(SV)\n    k_param <- input$k_param\n    beta <- input$beta\n    effort <- input$effort\n    reward <-input$reward\n    \n    if (input$func_form == \"Linear\") {\n      sv_text = sprintf(\"$$%.2f = %i - (%.2f)%i$$\", SV, reward, k_param, effort)\n    } else if (input$func_form == \"Parabolic\") {\n      sv_text = sprintf(\"$$%.2f = %i - (%.2f)(%i^2)$$\", SV, reward, k_param, effort)\n    } else if (input$func_form == \"Hyperbolic\") {\n      sv_text = sprintf(\"$$%.2f = \\\\frac{%i}{1 + (%.2f)%i}$$\", SV, reward, k_param, effort)\n    }\n    \n    withMathJax(\n      sv_text,\n      sprintf(\"$$%.3f = \\\\frac{e^{%.2f*%.2f}}{e^{%.2f*%.2f} + e^{1*%.2f}}$$\", soft_out, SV, beta, SV, beta, beta)\n    )\n  })\n  \n  output$softmax_plot <- renderPlot({\n    \n    # include choices based on softmax? would need to be recalculated\n    # each time, which could become expensive...\n    # might be a way to preallocate to workaround (set a seed and load all possibilities?)\n    # choice = as.numeric(soft_out > runif(length(soft_out)))\n\n    curve(softmax(x), from=-6, to=6)\n    points(SV_compute(), softmax(SV_compute()), col = \"red\", bg = \"red\", pch = 21)\n  })\n\n  create_curve <- function() {\n    k_param = input$k_param\n    effort = input$effort\n    \n    if (input$func_form == \"Linear\") {\n      curve(-x*k_param, from=1, to=5, ylim=c(-15,-0))\n    } else if (input$func_form == \"Parabolic\") {\n      curve(-((x^2)*k_param), from=1, to=5, ylim=c(-50,0))\n      points(effort, -((effort^2)*k_param), col=\"red\", bg=\"red\", pch=21)\n    } else if (input$func_form == \"Hyperbolic\") {\n      curve(1/(1+x*k_param), from=1, to=5, ylim=c(0,1))\n    }\n  }\n  \n  output$effort_plot <- renderPlot({\n    create_curve()\n  })\n  \n  output$table <- renderDT({\n    testtable$SV <- testtable$reward_level - (testtable$effort_level*input$k_param)\n    testtable$SV = round(testtable$SV, digits=4)\n    testtable\n  })\n  \n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n","type":"text"}]
